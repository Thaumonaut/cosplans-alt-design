class n{baseUrl;constructor(t="/api"){this.baseUrl=t}async request(t,e={}){const s=`${this.baseUrl}${t}`;try{const r=await fetch(s,{headers:{"Content-Type":"application/json",...e.headers},...e}),o=await r.json();if(!r.ok)throw new Error(o.message||`HTTP ${r.status}`);return o}catch(r){throw console.error(`API request failed: ${t}`,r),r instanceof Error?r:new Error("Unknown API error")}}async getProjects(t){const e=new URLSearchParams;t?.status&&e.set("status",t.status),t?.limit&&e.set("limit",t.limit.toString()),t?.offset&&e.set("offset",t.offset.toString());const s=e.toString(),r=`/projects${s?`?${s}`:""}`;return this.request(r)}async getProject(t){return this.request(`/projects/${t}`)}async createProject(t){return this.request("/projects",{method:"POST",body:JSON.stringify(t)})}async updateProject(t,e){return this.request(`/projects/${t}`,{method:"PUT",body:JSON.stringify(e)})}async deleteProject(t){return this.request(`/projects/${t}`,{method:"DELETE"})}async getTasks(t){const e=new URLSearchParams;t?.projectId&&e.set("projectId",t.projectId.toString()),t?.completed!==void 0&&e.set("completed",t.completed.toString()),t?.priority&&e.set("priority",t.priority);const s=e.toString(),r=`/tasks${s?`?${s}`:""}`;return this.request(r)}async createTask(t){return this.request("/tasks",{method:"POST",body:JSON.stringify(t)})}async getEvents(t){const e=new URLSearchParams;t?.projectId&&e.set("projectId",t.projectId.toString()),t?.type&&e.set("type",t.type),t?.upcoming!==void 0&&e.set("upcoming",t.upcoming.toString());const s=e.toString(),r=`/events${s?`?${s}`:""}`;return this.request(r)}async createEvent(t){return this.request("/events",{method:"POST",body:JSON.stringify(t)})}}const c=new n;export{c as a};
