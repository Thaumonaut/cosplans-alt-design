import{json as r}from"@sveltejs/kit";let c=[{id:1,title:"Anime Expo 2025",description:"Major anime convention in Los Angeles",date:new Date("2025-07-04"),type:"convention",projectId:1},{id:2,title:"Photoshoot with photographer",description:"Professional photoshoot for Sailor Moon cosplay",date:new Date("2025-11-20"),type:"photoshoot",projectId:2},{id:3,title:"Nezuko deadline",description:"Final deadline for Nezuko cosplay completion",date:new Date("2025-12-15"),type:"deadline",projectId:1}];const u=async({url:a})=>{try{await new Promise(s=>setTimeout(s,60));const e=a.searchParams.get("projectId"),o=a.searchParams.get("type"),i=a.searchParams.get("upcoming");let t=c;if(e){const s=parseInt(e);isNaN(s)||(t=t.filter(n=>n.projectId===s))}if(o&&o!=="all"&&(t=t.filter(s=>s.type===o)),i!==null){const s=new Date,n=i==="true";t=t.filter(d=>n?new Date(d.date)>=s:new Date(d.date)<s)}t.sort((s,n)=>new Date(s.date).getTime()-new Date(n.date).getTime());const p={data:t,success:!0,message:`Retrieved ${t.length} events`};return r(p)}catch{return r({data:[],success:!1,message:"Failed to fetch events"},{status:500})}},m=async({request:a})=>{try{const e=await a.json();if(!e.title||!e.date)return r({data:{},success:!1,message:"Missing required fields: title, date"},{status:400});const o={id:Math.max(...c.map(t=>t.id),0)+1,title:e.title,description:e.description,date:new Date(e.date),type:e.type||"other",projectId:e.projectId};return c.push(o),r({data:o,success:!0,message:"Event created successfully"},{status:201})}catch{return r({data:{},success:!1,message:"Failed to create event"},{status:500})}};export{u as GET,m as POST};
